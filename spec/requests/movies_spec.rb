require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/movies', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Movie. As you add validations to Movie, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) do
    { movie_or_serie: 'MOVIE',
      url_picture: 'picture.net/movie/ZZZ',
      title: 'ZZZ',
      debut_date: '1963-04-14', score: 3,
      genre_id: Genre.create(name: 'NewGenre', url_picture: 'picture.net/NewGenre').id }
  end

  let(:invalid_attributes) do
    { movie_or_serie: 'MOVIE AND SERIE',
      url_picture: '',
      title: nil,
      debut_date: 'primero de enero', score: 3.999999,
      genre_id: 0 }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # MoviesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { "Authorization": get_token }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Movie.create! valid_attributes
      get movies_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      movie = Movie.create! valid_attributes
      get movie_url(movie), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Movie' do
        expect do
          post movies_url,
               params: { movie: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Movie, :count).by(1)
      end

      it 'renders a JSON response with the new movie' do
        post movies_url,
             params: { movie: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Movie' do
        expect do
          post movies_url,
               params: { movie: invalid_attributes }, as: :json
        end.to change(Movie, :count).by(0)
      end

      it 'renders a JSON response with errors for the new movie' do
        post movies_url,
             params: { movie: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { movie_or_serie: 'SERIE',
          url_picture: 'picture.net/movie/ZZZ+A',
          title: 'ZZZ+A',
          debut_date: '2021-04-14', score: 5,
          genre_id: Genre.create(name: 'NewGenre+A', url_picture: 'picture.net/NewGenre+A').id }
      end

      it 'updates the requested movie' do
        movie = Movie.create! valid_attributes
        patch movie_url(movie),
              params: { movie: new_attributes }, headers: valid_headers, as: :json
        movie.reload
        # assertions for updated state
        movie_json = JSON.parse(response.body)
        expect(movie_json['movie_or_serie']).to eq('SERIE')
        expect(movie_json['url_picture']).to eq('picture.net/movie/ZZZ+A')
        expect(movie_json['title']).to eq('ZZZ+A')
        expect(movie_json['debut_date']).to eq('2021-04-14')
        expect(movie_json['score']).to eq(5)
        expect(movie_json['genre']['id']).to eq(Genre.order('created_at').last.id)
      end

      it 'renders a JSON response with the movie' do
        movie = Movie.create! valid_attributes
        patch movie_url(movie),
              params: { movie: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the movie' do
        movie = Movie.create! valid_attributes
        patch movie_url(movie),
              params: { movie: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested movie' do
      movie = Movie.create! valid_attributes
      expect do
        delete movie_url(movie), headers: valid_headers, as: :json
      end.to change(Movie, :count).by(-1)
    end
  end
end
