require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/casts', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Cast. As you add validations to Cast, be sure to
  # adjust the attributes here as well.
  # ____________________________________________________________________________ #
  let(:valid_attributes) do
    { movie_id: Movie.create(
      movie_or_serie: 'MOVIE',
      url_picture: 'picture.net/movie/ZZZ',
      title: 'ZZZ',
      debut_date: '1963-04-14', score: 3,
      genre_id: Genre.create(
        name: 'NewGenre', url_picture: 'picture.net/NewGenre'
      ).id
    ).id,
      character_id: Character.create(
        url_picture: 'picture.net/characters/AAAAA',
        name: 'AAAAA', age: 62, weight: 0.58,
        history: 'AAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAA...'
      ).id }
  end

  let(:invalid_attributes) do
    { movie_id: '1',
      character_id: -1 }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CastsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    { "Authorization": get_token }
  end
  # ____________________________________________________________________________ #
  describe 'GET /index' do
    it 'renders a successful response' do
      Cast.create! valid_attributes
      get casts_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end
  # ____________________________________________________________________________ #
  describe 'GET /show' do
    it 'renders a successful response' do
      cast = Cast.create! valid_attributes
      get cast_url(cast), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end
  # ____________________________________________________________________________ #
  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Cast' do
        expect do
          post casts_url,
               params: { cast: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Cast, :count).by(1)
      end

      it 'renders a JSON response with the new cast' do
        post casts_url,
             params: { cast: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
    # ____________________________________________________________________________ #
    context 'with invalid parameters' do
      it 'does not create a new Cast' do
        expect do
          post casts_url,
               params: { cast: invalid_attributes }, as: :json
        end.to change(Cast, :count).by(0)
      end

      it 'renders a JSON response with errors for the new cast' do
        post casts_url,
             params: { cast: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end
  # ____________________________________________________________________________ #
  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          movie_id: Movie.create(
            movie_or_serie: 'SERIE',
            url_picture: 'picture.net/movie/YYY',
            title: 'YYY',
            debut_date: '1999-01-19', score: 1,
            genre_id: Genre.create(
              name: 'NewGenre-Y', url_picture: 'picture.net/NewGenre-Y'
            ).id
          ).id,
          character_id: Character.create(
            url_picture: 'picture.net/characters/BBBB',
            name: 'BBBB', age: 12, weight: 100.5,
            history: 'BBBBBBBBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBBBBBBBBBBBB...'
          ).id
        }
      end
      it 'updates the requested cast' do
        cast = Cast.create! valid_attributes
        patch cast_url(cast),
              params: { cast: new_attributes }, headers: valid_headers, as: :json
        cast.reload
        # assertions for updated state
        cast_json = JSON.parse(response.body)
        expect(cast_json['movie']['id']).to eq(Movie.order('created_at').last.id)
        expect(cast_json['character']['id']).to eq(Character.order('created_at').last.id)
      end
      it 'renders a JSON response with the cast' do
        cast = Cast.create! valid_attributes
        patch cast_url(cast),
              params: { cast: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the cast' do
        cast = Cast.create! valid_attributes
        patch cast_url(cast),
              params: { cast: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end

  # ____________________________________________________________________________ #
  describe 'DELETE /destroy' do
    it 'destroys the requested cast' do
      cast = Cast.create! valid_attributes
      expect do
        delete cast_url(cast), headers: valid_headers, as: :json
      end.to change(Cast, :count).by(-1)
    end
  end
end
# ____________________________________________________________________________ #
# ____________________________________________________________________________ #
